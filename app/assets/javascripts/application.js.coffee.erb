#= require widgets
#= require jquery
#= require jquery_ujs
#= require jquery-ui/datepicker
#= require jquery-ui/spinner
#= require jquery.placeholder
#= require jquery.smartbanner
#= require jquery-ui/accordion
#= require jquery.scrollTo.min
#= require flip.min
#= require imagesloaded
#= require underscore
#= require handlebars.runtime
#= require handlebars
#= require matchMedia
#= require matchMedia.addListener
#= require enquire
#= require smooth-scroll
#= require base64js.min


#= require_tree ./templates
#= require_tree .

String::to_n = ->
  if(this == undefined || this == null || this.length == 0)
    NaN
  else
    1 * this

String::to_s = ->
  this + ""

Number::to_n = ->
  if(this == undefined || this == null || this.length == 0)
    NaN
  else
    1 * this

Number::to_s = ->
  this + ""

Number::to_i = -> this

String::to_i = ->
  if(this == undefined || this == null || this.length == 0)
    0
  else
    Math.round(1 * this) || 0

Array::max = (array) ->
  Math.max.apply Math, array

window.isBlank = (obj) ->
  if ((cache = typeof obj) != "number" || isNaN(obj)) && !obj
    return true
  if cache == "string" && obj.replace(/\s/g, "").length == 0
    return true
  if cache == 'object'
    if (cache = Object.prototype.toString.call(obj)) == "[object Array]" && obj.length == 0
      return true
    if cache == "[object Object]"
      return false for cache of obj
      return true

  return false

window.isPresent = (obj) ->
  !isBlank(obj)

window.btoa = (text) ->
  byteArray = []
  byteArray.push(char.charCodeAt(0)) for char in text
  base64js.fromByteArray(byteArray)

window.atob = (text) ->
  str = ""
  byteArray = base64js.toByteArray(text)
  str += String.fromCharCode(byte) for byte in byteArray
  str

window.b64EncodeUnicode = (text) ->
  btoa(encodeURIComponent(text).replace(/%([0-9A-F]{2})/g, (match, p1) ->
    String.fromCharCode('0x' + p1)
  ))

window.b64DecodeUnicode = (text) ->
  decodeURIComponent(Array.prototype.map.call(atob(text), (c) ->
    "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2)
  ).join(""));

$(window).load ->
  Navigation.calculate_logo()
  $(window).trigger 'resize'

getParams = ->
  query = window.location.search.substring(1)
  raw_vars = query.split("&")

  params = {}

  for v in raw_vars
    [key, val] = v.split("=")
    params[key] = decodeURIComponent(val)
  params

checkWithLoginModalChange = ->
  params = getParams()
  continueUrl = null
  if !!params['continue_url']
    continueUrl = encodeURIComponent(encodeURIComponent(params['continue_url']))
  return continueUrl

checkWithLoginModal = ->
  params = getParams()
  isLoginModalRequired = !!params['with_login']
  isSignupModalRequired = !!params['with_signup']
  if !!params['continue_url']
    continueUrl = encodeURIComponent(encodeURIComponent(params['continue_url']))
  if isLoginModalRequired
    window.openLoginModal({
      continueUrl: continueUrl
    })

  if isSignupModalRequired
    dialog = new Dialog
      customHeader: HandlebarsTemplates['sessions/sign_up_header'](window)
      id: 'sign-up'
      content: HandlebarsTemplates['sessions/sign_up']({
        signUpURL: window.sign_up_url,
        skin: window.skin
        with_login: true
        continueUrl: continueUrl
      })
    dialog.open()

checkRootParams = ->
  checkWithLoginModal()

$(document).ready ->
  window.navigation = new Navigation()
  Navigation.calculate_logo()

  checkRootParams()

  $('input, textarea').placeholder()

  $('.sign-out a').on('click', () ->
    GoogleAnalyticsService.track('users', 'sign-out')
  )

  $.fn.load = (text = null) ->
    self = this
    element = this[0]
    width = element.offsetWidth
    height = element.offsetHeight

    $(this).prop("disabled", true)

    loadingImage = $("#loading-page img").first().clone().width(height - 10)
    this.loadingOverlay = $("<div class='loading-overlay'>").append(loadingImage)

    $(window).resize ->
      if !$(self).prop("disabled")
        return;
      elWidth = element.offsetWidth
      elHeight = element.offsetHeight
      self.loadingOverlay.offset($(self).offset())
      $("body").append(self.loadingOverlay.width(elWidth).height(elHeight))

    this.loadingOverlay.offset($(this).offset())

    $("body").append(this.loadingOverlay.width(width).height(height))

  $.fn.finishLoad = () ->
    this.loadingOverlay.remove()

    $(this).prop("disabled", false)

  # adds the authenticity token to any forms that aren't generated by rails
  window.authenticity_token = $('meta[name=csrf-token]').attr 'content'
  $(document).on 'submit', 'form', ->
    form = $(this)
    unless form.find('input[name=authenticity_token]').length
      input = $("""<input type='hidden' name='authenticity_token' value='#{ window.authenticity_token }'>""")
      input.prependTo form

  Tabs.initialize()

  window.orderService = new OrderService()

  #Set up resize event on opened dialogs
  $(window).resize ->
    Dialog.resizeAll()

  # TODO: needs tests
  profileMenu = new ProfileMenu
  profileMenu.initialize()

  #set up the modal popup to ask if the user wanna still as guest or want to sign in or sign up.
  $(document).on 'click', '[data-dialog=sign-in-modal-helper][data-dialog-trigger]', ->
    dialog = new Dialog
      title: "Sorry, you must be logged."
      id: 'sign-in'
      content: HandlebarsTemplates['sessions/sign-in-modal-helper'](window)

    dialog.open()
    signInEvents()
    return false

  $(document).on 'click', '[data-dialog=sign-in][data-dialog-trigger]', (event) ->
    event.preventDefault()
    continueUrl = checkWithLoginModalChange()
    if(!!continueUrl)
      window.openLoginModal({
        continueUrl: continueUrl
      })
    else
      dialog = new Dialog
        customHeader: HandlebarsTemplates['sessions/sign_in_header'](window)
        id: 'sign-in'
        content: HandlebarsTemplates['sessions/sign_in'](window)

    dialog.open()

    signInEvents()

    return false

  # set up the sign up dialog
  $(document).on 'click', '[data-dialog=sign-up][data-dialog-trigger]', ->
    continueUrl = checkWithLoginModalChange()
    if(!!continueUrl)
      dialog = new Dialog
        customHeader: HandlebarsTemplates['sessions/sign_up_header'](window)
        id: 'sign-up'
        content: HandlebarsTemplates['sessions/sign_up']({
          signUpURL: window.sign_up_url,
          skin: window.skin
          with_login: true
          continueUrl: continueUrl
        })
    else
      dialog = new Dialog
        customHeader: HandlebarsTemplates['sessions/sign_up_header'](window)
        id: 'sign-up'
        content: HandlebarsTemplates['sessions/sign_up']({
          signUpURL: window.sign_up_url,
          skin: window.skin
        })

    dialog.open()

    signUpEvents({ marketingEnable: true });

    # Fix for IE custom checkbox
    $("div#sign-up label.selector-override input[type=hidden]").click ->
      name = $(this).attr("name");
      $(this).siblings("input[type='checkbox'][name='#{ name }']").trigger("click");

    $('.sign-up form').one('submit', () ->
      GoogleAnalyticsService.track('users', 'sign-up')
    )

    return false




  # Fix for IE custom checkbox
  $('label.selector-override input[type=hidden]').click ->
    name = $(this).attr("name");
    $(this).siblings("input[type='checkbox'][name='#{ name }']").trigger("click");

window.sensitiveDataEvents = (context) ->
  $("#{ context } form").submit(() ->
    passInput = $(this).find("#user_password")
    passConfirmInput = $(this).find("#user_password_confirmation")
    passInput.val(b64EncodeUnicode(passInput.val()))
    passConfirmInput.val(b64EncodeUnicode(passConfirmInput.val()))
  )

window.marketingEvents = () ->
  $("#user_birthday").on "change", ->
    val = $(this).val();
    $("#user_birthday_user").val(val);

  $("#user_birthday_user").on "change", ->
    val = $(this).val();
    $("#user_birthday").val(val);

  $("#user_marketing_email_opt_in").on "checked", ->
  if $("#user_marketing_email_opt_in").is(":checked")
    val = $("#user_birthday_user").val();
    $("#user_birthday").val(val);
    $("#user_birthday_user").hide();
    $("#user_birthday_label").hide();
    $("#su-brand-fields").slideToggle();

  $("#user_marketing_email_opt_in").on "change", ->
    if $("#user_marketing_email_opt_in").is(":checked")
      val = $("#user_birthday_user").val();
      $("#user_birthday").val(val);
      $("#user_birthday_user").hide();
      $("#user_birthday_label").hide();
      $("#su-brand-fields").slideToggle();
    else
      val = $("#user_birthday").val();
      $("#user_birthday_user").val(val);
      $("#user_birthday_label").show();
      $("#user_birthday_user").slideToggle();
      $("#su-brand-fields").hide();

window.signInEvents = () ->
  sensitiveDataEvents("div.sign-in")

  $('.sign-in form').one('submit', () ->
    GoogleAnalyticsService.track('users', 'sign-in')
  )

window.signUpEvents = (params = {}) ->
  sensitiveDataEvents("div.sign-up")

  marketingEvents() if params.marketingEnable

$.fn.textWidth = (text, font) ->
  $.fn.textWidth.fakeEl = $("<span>").hide().appendTo(document.body) unless $.fn.textWidth.fakeEl
  $.fn.textWidth.fakeEl.text(text or @val() or @text()).css "font", font or @css("font")
  $.fn.textWidth.fakeEl.width()

window.openLoginModal = (params = {}) ->
  if(!params.continueUrl)
    continueUrl = '/'
  else
    continueUrl = params.continueUrl

  dialog = new Dialog
    customHeader: HandlebarsTemplates['sessions/sign_in_header'](window)
    id: 'sign-in'
    content: HandlebarsTemplates['sessions/sign_in']({
      window
      with_login: true
      continueUrl: continueUrl
    })
  dialog.open()